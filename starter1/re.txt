Curve evalBspline(const vector< Vector3f >& P, unsigned steps)
{	
	cout<<"the number of P:"<<P.size()<<endl;
	// Check
	if (P.size() < 4)
	{
		cerr << "evalBspline must be called with 4 or more control points." << endl;
		exit(0);
	}

	// TODO:
	// It is suggested that you implement this function by changing
	// basis from B-spline to Bezier.  That way, you can just call
	// your evalBezier function.
	Matrix4f M(1, -3, 3, -1,
				4, 0, -6, 3,
				1, 3, 3, -3,
				0, 0, 0, 1);
	M/=6;
	Matrix4f Mbezier(1, -3, 3, -1,
					0, 3, -6, 3,
					0, 0, 3, -3,
					0, 0, 0, 1);
	Matrix4f Mbezier_inv = Mbezier.inverse();
	Matrix4f GM = M * Mbezier_inv;

	Curve R;

	vector<Vector3f> Pnew;
	for(unsigned int i=3;i<P.size();i++){
		
		Vector4f Px(P[i-3].x(), P[i-2].x(), P[i-1].x(), P[i].x());
		Vector4f Py(P[i-3].y(), P[i-2].y(), P[i-1].y(), P[i].y());
		Vector4f Pz(P[i-3].z(), P[i-2].z(), P[i-1].z(), P[i].z());
		Pnew.push_back(Vector3f(Vector4f::dot(Px,GM.getCol(0)), Vector4f::dot(Py,GM.getCol(0)), Vector4f::dot(Pz,GM.getCol(0))));
		Pnew.push_back(Vector3f(Vector4f::dot(Px,GM.getCol(1)), Vector4f::dot(Py,GM.getCol(1)), Vector4f::dot(Pz,GM.getCol(1))));
		Pnew.push_back(Vector3f(Vector4f::dot(Px,GM.getCol(2)), Vector4f::dot(Py,GM.getCol(2)), Vector4f::dot(Pz,GM.getCol(2))));
		Pnew.push_back(Vector3f(Vector4f::dot(Px,GM.getCol(3)), Vector4f::dot(Py,GM.getCol(3)), Vector4f::dot(Pz,GM.getCol(3))));
		//tmp.tmp=Vector3f(R[R.size()-1].N.x()+1.1,R[R.size()-1].N.y(),R[R.size()-1].N.z());
		// Curve R_=evalBezier(Pnew,steps);

	}
	for(unsigned int j=0;j<Pnew.size();j+=4){
		Vector4f Px(P[0+j].x(), P[1+j].x(), P[2+j].x(), P[3+j].x());
		Vector4f Py(P[0+j].y(), P[1+j].y(), P[2+j].y(), P[3+j].y());
		Vector4f Pz(P[0+j].z(), P[1+j].z(), P[2+j].z(), P[3+j].z());
		float delta = 1.0f / steps;
		float t = 0;
		for(unsigned int i = 0; i < steps+1; i++){
			//cout<<"the i round "<<i<<" is done"<<endl;
			// cout<<"i+j*(steps) "<<i+j*(steps)<<endl;
			Vector4f pos(1, t, t*t, t*t*t);

			Vector4f weight = M * pos;
			R[i+j*(steps)].V = Vector3f(Vector4f::dot(Px,weight), Vector4f::dot(Py,weight), Vector4f::dot(Pz,weight));
			//cout<<"the "<<i<<" V is "<<R[i+j*(steps)].V.x()<<" "<<R[i+j*(steps)].V.y()<<" "<<R[i+j*(steps)].V.z()<<endl;
			Vector4f tangent(0, 1, 2*t, 3*t*t);
			Vector4f tangent_weight = M * tangent;
			R[i+j*(steps)].T = Vector3f(Vector4f::dot(Px,tangent_weight), Vector4f::dot(Py,tangent_weight),Vector4f::dot(Pz,tangent_weight)).normalized();
			//cout<<"the T is "<<R[i+j*(steps)].T.x()<<" "<<R[i+j*(steps)].T.y()<<" "<<R[i+j*(steps)].T.z()<<endl;

			if(j == 0){

			// If it is the first step, we should initialize the N
				Vector3f tmp=Vector3f(0.9,1.0,1.1f);
				
				R[i+j*(steps)].N = Vector3f::cross(tmp, R[i+j*(steps)].T).normalized();
				R[i+j*(steps)].B = Vector3f::cross(R[i+j*(steps)].T,R[i+j*(steps)].N).normalized();
				//cout<<"here?"<<endl;
			}
			else{
			// iteratively
				R[i+j*(steps)].N = Vector3f::cross(R[j*(steps)+i-1].B,R[i+j*(steps)].T).normalized();
				R[i+j*(steps)].B = Vector3f::cross(R[j*(steps)+i].T,R[i+j*(steps)].N).normalized();
				//cout<<"the N is "<<R[i+j*(steps)].N<<endl;
				
			}
			cout<<"the "<<i<<" N is "<<R[i+j*(steps)].N.x()<<" "<<R[i+j*(steps)].N.y()<<" "<<R[i+j*(steps)].N.z()<<endl;
			//cout<<"the B is "<<R[i+j*(steps)].B<<endl;
			t += delta;

		}
	
	}
	// cout<<"we complete the transformation"<<endl;
	// cerr << "\t>>> evalBSpline has been called with the following input:" << endl;

	// cerr << "\t>>> Control points (type vector< Vector3f >): " << endl;
	// for (int i = 0; i < (int)P.size(); ++i)
	// {
	// 	cerr << "\t>>> " << P[i] << endl;
	// }

	// cerr << "\t>>> Steps (type steps): " << steps << endl;
	// cerr << "\t>>> Returning empty curve." << endl;

	// Return an empty curve right now.
	cout<<"R's size is :"<<R.size()<<endl;
	return R;
}
